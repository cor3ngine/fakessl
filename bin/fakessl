#!/usr/bin/env ruby
$:.unshift File.join(File.dirname(File.dirname(__FILE__)), 'lib')

require 'fakessl'
require 'optparse'

class String
  def is_integer?
    self.to_i.to_s == self
  end
end

options = {}

optparse = OptionParser.new do |opts|

  opts.banner = "Usage: fakessl -g DOMAIN_NAME -p PORT\n" \
                "Examples:\n" \
                "1. Only generate fake certificates: fakessl -g test.org\n" \
                "2. Generate fake certificate and setup server: fakessl -g test.org -p 5000\n" \
                "3. Setup server using other external certificates: fakessl -c domain.cert -k domain.key -p 5000\n" 
  opts.on('-h', '--help', 'Display this menu') do
    puts opts
    exit
  end
  opts.on('-g', '--generate DOMAIN_NAME', 'FakeSSL certificate generation') do |f|
    options[:domain] = f
  end
  opts.on('-c', '--certificate FILE', 'FakeSSL certificate') do |f|
    options[:certificate] = f
  end
  opts.on('-k', '--key FILE', 'FakeSSL private key') do |f|
    options[:key] = f
  end
  opts.on('-p', '--port PORT', 'Port that FakeSSL should bind eg. 443') do |f|
    if f.is_integer?
      options[:port] = f
    else
      puts opts
      exit
    end
  end

end

optparse.parse!

if options[:domain] && options[:port].nil?
  cert = FakeSSL::Cert.new(options[:domain])
  cert.generate

elsif options[:domain] && options[:port]
  cert = FakeSSL::Cert.new(options[:domain])
  cert.generate
  server = FakeSSL::Server.new(options[:port])

elsif (!(options[:certificate].nil?) && !(options[:key].nil?) && !(options[:port].nil?))
  if Integer(options[:port]) < 1025 
    raise "Must run as root" unless Process.uid == 0
  end
  cert = FakeSSL::cert_path(options[:certificate],options[:key])
  server = FakeSSL::Server.new(options[:port])

else
  puts "[-] Mandatory Parameter is missing, try `fakessl -h`"
end

